---
date: "2023-10-19"
description: Avalia√ß√£o 1 - CE303 ‚Äì Visualiza√ß√£o de Dados Aplicada
subtitle:  Raymundo Eduardo Pilz
title: "Popcorn Time"
image: featured.png
title-block-style: none
toc: false
categories: 
  - R
  - Power BI
  - Dataviz
---


## LAYOUT EM GGPLOT 


### Carregando Bibliotecas
```{r  warning=F, message=F}
library(extrafont)
library(dplyr)
library(data.table)
library(ggplot2)
library(tidyverse)
library(scales)
require(png)
require(grid)
library(wordcloud)
library(ggwordcloud)
library(ggh4x)
library(rvest)
library(stringr)
library(countrycode)
library(leaflet)
```

### Carregando datasets
```{r}
d_titulos <- fread("./dados/dTitleBasics.csv")
d_tempo <- fread("./dados/dTitleRuntime.csv")

str(d_titulos)

str(d_tempo)
```


### Criando arquivos para puxar os dados referente aos pa√≠ses dos filmes utilizando webscrap
```{r}
# Importando arquivo base
d_paises <- fread("./dados/dCountry.csv")

# Criando nova tabela
dcountry <- select(d_paises, tconst)
dcountry$url <- paste0("https://www.imdb.com/title/", dcountry$tconst, "/")

# Criando a fun√ß√£o 
extractCountry <- function(url) {
  page <- read_html(url)
  countries <- page %>%
    html_nodes(".ipc-metadata-list__item[data-testid='title-details-origin'] .ipc-inline-list__item a.ipc-metadata-list-item__list-content-item--link") %>%
    html_text() %>%
    paste(collapse = ",")
  return(countries)
}

# Invoca a fun√ß√£o salva e carregar os dados
dcountry <- dcountry %>%
  rowwise() %>%
  mutate(country = extractCountry(url))

dcountry <- dcountry %>%
  mutate(country = strsplit(country, ",")) %>%
  unnest(country)

dcountry <- dcountry %>%
  group_by(country) %>%
  summarise(freq = n())

dcountry1 <- dcountry

dcountry$iso3 <- countrycode(sourcevar = dcountry$country,
                             origin = "country.name",
                             destination = "iso3c")

g6_data <- dcountry

get_lat_long <- function(country_name) {
  world <- map_data("world")
  country_data <- world[world$region %in% country_name, c("region", "long", "lat")]
  return(country_data)
}

# Obtendo coordenadas de latitude e longitude
coordenadas <- lapply(dcountry$country, get_lat_long)
coordenadas_df <- do.call(rbind, coordenadas)
coordenadas_df$iso3 <- countrycode(sourcevar = coordenadas_df$region,
                             origin = "country.name",
                             destination = "iso3c")



# Remove leading and trailing spaces from the joining column in both data frames
coordenadas_df$iso3 <- str_trim(coordenadas_df$iso3)
g6_data$iso3 <- str_trim(g6_data$iso3)

# Perform the left join again
g6_data <- left_join(coordenadas_df, g6_data, by = "iso3")
head(g6_data)

unique(g6_data$freq)
g6_data <- select()




#----
  # Carregue as bibliotecas


# Suponha que 'dcountry' seja seu dataframe com a coluna 'Country' contendo nomes dos pa√≠ses

# Converta os nomes dos pa√≠ses em c√≥digos ISO de pa√≠ses
dcountry$iso3 <- countrycode(sourcevar = dcountry$country, origin = "country.name", destination = "iso3c")

# Crie um mapa b√°sico
mapa <- leaflet(data = dcountry) %>%
  addTiles() %>% # Adicione o fundo do mapa
  addCircleMarkers(radius = ~10, # Tamanho das bolhas
                   color = "blue", 
                   fillOpacity = 0.7, 
                   popup = ~paste(country, "<br>Value:", freq)) # Adicione as bolhas com informa√ß√µes do pa√≠s

# Visualize o mapa
mapa



#------
# Library
# Exemplo de dados
dados <- data.frame(
  pais = c("Brazil", "United States", "United Kingdom"),  # Nomes dos pa√≠ses
  valor = c(100, 200, 300)  # Exemplo de valores associados √†s bolhas
)

# Converta os nomes dos pa√≠ses em c√≥digos ISO de pa√≠ses
dados$iso3 <- countrycode(sourcevar = dados$pais, origin = "country.name", destination = "iso3c")

# Carregue o pacote 'maps' para obter dados geogr√°ficos
library(maps)

# Obtenha dados geogr√°ficos para os pa√≠ses
dados_geograficos <- map_data("world")

# Mescle os dados geogr√°ficos com os dados dos pa√≠ses
dados_completos <- merge(dados_geograficos, 
                         dcountry, 
                         by.x = "region",
                         by.y = "iso3",
                         all.x = TRUE)

# Crie o bubble map usando ggplot2
ggplot(data = dados_completos, 
       aes(x = long, 
           y = lat, 
           size = freq,
           fill = freq)) +
  geom_polygon(color = "white") +  # Adicione contornos dos pa√≠ses
  geom_point(shape = 21) +  # Adicione bolhas
  scale_size_continuous(range = c(3, 20)) +  # Ajusta o intervalo de tamanho das bolhas
  scale_fill_viridis_c() +  # Esquema de cores para as bolhas
  theme_minimal() +
  labs(title = "Bubble Map", x = "Longitude", y = "Latitude")



str(d_paises)
```

### Tratamento e Limpeza de dados
Para otimiza√ß√£o do trabalho ser√° criado uma tabela principal com todas as variaveis necessarias para a cria√ß√£o dos gr√°ficos.

- Pontos a serem observados:
  - Ser√° criado uma nova coluna para a classifica√ß√£o em "Filme" ou "Epis√≥dio de S√©rie de TV" a partir da coluna "titleType" da (d_titulos). Foram constatados que alguns vari√°veis de "titleType" podem ter sido favoritadas incorretamente quando salvas no site. Para n√£o interfir na apura√ß√£o dos dados, as mesmas ser√£o eliminadas.
  - Vamos trabalhar com o tempo em horas, assim, √© necess√°rios transformar minutos em horas.
  
```{r warning=F, message=FALSE}
# Criar nova tabela a partir de d_titulos e realizando a classifica√ß√£o 
fdata <- d_titulos %>%
  select(tconst, titleType, startYear, genres) %>%
  mutate(Type = case_when(
    titleType %in% c("movie", "tvMovie") ~ "Movie",
    titleType == "tvEpisode" ~ "TV Series",
    TRUE ~ "Others"
  ))

# Filtrar os resultados para excluir aqueles que s√£o classificados como "Others"
fdata <- filter(fdata, Type != "Others")

# Unir as tabelas d_data e d_tempo. tconst como chave primaria
fdata <- left_join(fdata, d_tempo, by = "tconst")

# Criar coluna horas e eliminar colunas desnecessarias
fdata <- fdata %>%
  mutate(Hours = runtimeMinutes / 60) %>%
  select(-titleType, -runtimeMinutes)  

fdata

```

### Criando gr√°ficos com temas espec√≠ficos
```{r warning=F, message=F}
# Temas padr√£o
cor_titulo <- "#000000"
fonte_titulo <- "Rockwell"
tamanho_titulo <- 30

# Cores Type
cor_series <- "#D64550"
cor_filmes <- "#919191"

dcolor <- data.frame(
  Type = c("Movie", "TV Series"),
  Color = c(cor_filmes, cor_series))


# Fun√ß√£o para criar r√≥tulos com imagens
imagem <- function(tipo) {
  if (tipo == "Movie") {
    return("üé¨")
  } else if (tipo == "TV Series") {
    return("üì∫")
  } else {
    return(tipo)
  }
}

# Definindo tema
meutema <- function(){
  theme_void() +
  theme(
    # axis.title = element_text(size = 20, 
    #                           family = "Rockwell", 
    #                           colour = cor_titulos), 
    # axis.text = element_text(size = 20,
    #                          family = "Rockwell",
    #                          colour = cor_titulos),
    plot.title = element_text(size = 30,
                              family = "Rockwell",
                              colour = cor_titulo,
                              face = "bold",
                              hjust=0.5)#,
    # plot.background = element_rect(fill = NA,
    #                                colour = NA),
    # panel.background = element_rect(fill = NA,
    #                                 colour = NA),
    # axis.ticks = element_line(colour = cor_titulos,
    #                           size = 10),
    # strip.background = element_rect(fill = cor_titulos),
    # strip.text=element_text(family = "Rockwell", 
    #                         size = 15)
    )
}

#GR√ÅFICO 1
# tabela <- data.frame(VALORES=sort(table(x)))
# 
# g1 <- tabela %>% ggplot(aes(x=VALORES.x,y=VALORES.Freq))+
#   geom_bar(stat='identity',fill=cor_filmes)+
#   coord_flip()+
#   xlab("Categorias")+
#   ylab("Frequ√™ncia")+
#   ggtitle("Gr√°fico 1")+
#   meutema()
# 
# #GR√ÅFICO 2
# g2 <- dados %>% ggplot(aes(x=y1,y=y2))+
#   geom_point(size=5,colour=cor_filmes)+
#   ggtitle("Gr√°fico 2")+
#   xlab("Vari√°vel 1")+
#   ylab("Vari√°vel 2")+
#   meutema()

# #GR√ÅFICO 3
# g3 <- dados %>% ggplot(aes(x=y3))+
#   geom_density(fill=cor_filmes)+
#   facet_grid(facets=.~grp)+
#   coord_flip()+
#   ggtitle("Gr√°fico 3")+
#   ylab("Densidade")+
#   xlab("Vari√°vel 3")+
#   meutema()+
#   theme(axis.text.x = element_text(size=10, family = "Rockwell",colour=cor_series))
# 
# #GR√ÅFICO 4
# g4 <- dados %>% ggplot(aes(x=x,y=y2))+
#   geom_boxplot(fill=cor_filmes,colour=cor_series)+
#   ggtitle("Gr√°fico 4")+
#   ylab("Vari√°vel 2")+
#   xlab("")+
#   meutema()

```

## Graficos

### Grafico 1

```{r warning=F, message=F}
# Calcular a contagem para cada tipo (Type) em fdata
g1_data <- table(fdata$Type)

# Total de assistidos
total_assistido <- sum(g1_data)

# Criar o dataframe e incluir as cores
g1_data <- data.frame(Type = names(g1_data), 
                      Qtde = as.numeric(g1_data))
g1_data$Freq <- (g1_data$Qtde / total_assistido)

# Mesclar com o dataframe de cores (dcolor)
g1_data <- left_join(g1_data, dcolor, by = "Type")


# Caminho para as imagens
caminho_cinema <- "./imagens/cinema.png"
caminho_tv <- "./imagens/tv.png"

# Fun√ß√£o para criar r√≥tulos com imagens
criar_rotulo_com_imagem <- function(tipo) {
  if (tipo == "Movie") {
    return(htmltools::img(src = caminho_cinema, width = "50px"))
  } else if (tipo == "TV Series") {
    return(htmltools::img(src = caminho_tv, width = "50px"))
  } else {
    return(tipo)
  }
}


## GRAFICO
g2 <- plot_ly(
  data = g1_data,
  labels = ~Type,
  values = ~Qtde,
  type = "pie",
  hole = 0.6, 
  marker = list(colors = ~Color),  
  textposition = "outside",
  hoverinfo = "label+text+percent",
  #text = ~paste(Type),
  textinfo = "value",
  showlegend = FALSE
) %>%
add_annotations(
  text = format(total_assistido, big.mark = "."),  # Valor total
  x = 0.5,  # Posi√ß√£o horizontal no centro do c√≠rculo (0 a 1)
  y = 0.5,  # Posi√ß√£o vertical no centro do c√≠rculo (0 a 1)
  showarrow = FALSE,  # N√£o mostrar seta de apontamento
  font = list(family = fonte_titulo, 
                size = 80, 
                color = cor_titulo, 
                bold = TRUE)  
)# %>%
# layout(
#   title = list(
#     text = "FILMES VS S√âRIES DE TV",
#     font = list(family = fonte_titulo, 
#                 size = tamanho_titulo, 
#                 color = cor_titulo, 
#                 bold = TRUE),
#     x = 0.5#,  # Posi√ß√£o horizontal do t√≠tulo (0 a 1)
#     #y = 0.9   # Posi√ß√£o vertical do t√≠tulo (0 a 1)
#   )
# )

g2


```



```{r, warning=FALSE, message=F}
# Calcular a contagem para cada tipo (Type) em fdata
g1_data <- table(fdata$Type)

# Total de assistidos
total_assistido <- sum(g1_data)

# Criar o dataframe e incluir as cores
g1_data <- data.frame(Type = names(g1_data), 
                      Qtde = as.numeric(g1_data))
g1_data$Freq <- (g1_data$Qtde / total_assistido)

# Mesclar com o dataframe de cores (dcolor)
g1_data <- left_join(g1_data, dcolor, by = "Type")

g1_data <- g1_data %>% 
  arrange(desc(Type))

# Criar o gr√°fico
g1 <- ggplot(
  g1_data, 
  aes(x = 1,
      y = Freq,
      fill = Color)) +
  geom_bar(width = 1,
           stat = "identity") +
  coord_polar("y",
              start = 0) +
  xlim(c(-1, 2)) +
  theme_void() +
  theme(plot.title = element_text(hjust = 0.5,
                                  size = 20,
                                  face = "bold")) +
  geom_text(aes(label = paste(sapply(Type,
                                     imagem))), 
            position = position_stack(vjust = 0.5), 
            size = 6) +
  geom_label(aes(x = 2.0, 
                 label = format(Qtde, 
                                big.mark = ".")), 
             position = position_stack(vjust = 0.5),
             size = 5,
             fill = "white",
             label.padding = unit(0.0, "lines"),
             label.size = 0.0,
             na.rm = FALSE,
             fontface = "bold") +
  ggtitle("FILMES VS S√âRIES DE TV") +
  scale_fill_identity() +
  theme(plot.title = element_text(size = 20,
                                  face = "bold")) +
  annotate("text",
           label = format(total_assistido, 
                          big.mark = "."),
           family = fonte_titulo,
           fontface = "bold",
           color = cor_titulo,
           size = 8,
           x = -1,
           y = 0) 

# Exibir o gr√°fico
print(g1)

```

## GRAFICO 2
```{r, warning=FALSE, message=F}
# Criando dataset
g2_data <- fdata %>%
  filter(!is.na(Hours)) %>%  # Remover entradas com NA em Hours
  group_by(Type) %>%
  summarise(Hours = sum(Hours))

# Total de horas assistidas
horas_assistidas <- round(sum(g2_data$Hours, na.rm = TRUE))
horas_assistidas

# Criar o dataframe e incluir as cores
g2_data$Freq <- (g2_data$Hours / horas_assistidas)

# Mesclar com o dataframe de cores (dcolor)
g2_data <- left_join(g2_data, dcolor, by = "Type")

g2_data <- g2_data %>% 
  arrange(desc(Type))

# Criar o gr√°fico
g2 <- ggplot(
  g2_data, 
  aes(x = 1,
      y = Freq,
      fill = Color)) +
  geom_bar(width = 1,
           stat = "identity") +
  coord_polar("y",
              start = 0) +
  xlim(c(-1, 2)) +
  theme_void() +
  theme(plot.title = element_text(hjust = 0.5,
                                  size = 20,
                                  face = "bold")) +
  geom_text(aes(label = paste(sapply(Type,
                                     imagem))), 
            position = position_stack(vjust = 0.5), 
            size = 6) +
  geom_label(aes(x = 2.0, 
                 label = format(round(Hours), 
                                big.mark = ".")), 
             position = position_stack(vjust = 0.5),
             size = 5,
             fill = "white",
             label.padding = unit(0.0, "lines"),
             label.size = 0.0,
             na.rm = FALSE,
             fontface = "bold") +
  ggtitle("HORAS ASSISTIDAS") +
  scale_fill_identity() +
  annotate("text",
           label = format(horas_assistidas, 
                          big.mark = "."),
           family = fonte_titulo,
           fontface = "bold",
           color = cor_titulo,
           size = 8,
           x = -1,
           y = 0) 

# Exibir o gr√°fico
print(g2)

```

## GRAFICO 3
```{r, warning=FALSE, message=F}
# Criando dataset
g3_data <- select(fdata, startYear, Type, Hours) %>%
  filter(!is.na(Hours))
g3_data$Year <- as.character(floor(g3_data$startYear / 10) * 10)

g3_data <- g3_data %>%
  filter(!is.na(Year)) %>%  # Remover entradas com NA em Hours
  group_by(Year, Type) %>%
  summarise(Hours = sum(Hours))

# Criar o dataframe e incluir as cores
#g3_data$Freq <- (g3_data$Hours / horas_assistidas)

# Mesclar com o dataframe de cores (dcolor)
g3_data <- left_join(g3_data, dcolor, by = "Type")

# g3_data <- g3_data %>% 
#   arrange(desc(Type))


# Criar o gr√°fico
g3 <- ggplot(
  g3_data,
  aes(fill = Type,
      y = Hours,
      x = Year,
      label = format(round(Hours), big.mark = "."))) + 
  geom_bar(position = "stack",
           stat = "identity") +
  geom_text(data = subset(g3_data, Hours > 20),  
            position = position_stack(vjust = 0.8, reverse = FALSE),
            size = 4,  
            color = "black",  
            fontface = "bold",  
            show.legend = FALSE) +  
  ggtitle("HORAS DE FILMES E S√âRIES DE TV ASSISTIDOS POR D√âCADA") +
  xlab("") +
  ylab("Horas Assistidas") +
  scale_fill_manual(values = c(cor_filmes, cor_series)) +  
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5,
                                  size = 20,
                                  face = "bold"),
        axis.text.x = element_text(size = 14,  
                                   face = "bold",  
                                   vjust = 0.5,  
                                   hjust = 0),   
        axis.text.y = element_text(),
        legend.position = "top",  
        legend.justification = "center",  
        legend.title = element_blank(),
        legend.box = "horizontal") 

# Exibir o gr√°fico
print(g3)

```

## GRAFICO 4
```{r, warning=FALSE, message=F}
# Criando dataset
g4_data <- fdata %>%
  mutate(genres = strsplit(genres, ",")) %>%
  unnest(genres) %>%
  select(tconst, Type, genres)

g4_data <- subset(g4_data, Type == "Movie")


g4_data <- g4_data %>%
  group_by(genres) %>%
  summarise(freq = n())

g4 <- g4_data %>%
  ggplot() + 
  geom_text_wordcloud_area(aes(label = genres, size = freq), color = cor_filmes) +
  theme_void() +
  scale_size_continuous(range = c(1, 30)) +  # Adjust the size range according to your preference
  ggtitle("FILMES ASSISTIDOS POR G√äNERO") +
  theme(
    plot.title = element_text(hjust = 0.5, size = 20, face = "bold")
  )

# Print the word cloud plot
print(g4)
```

## GRAFICO 5
```{r, warning=FALSE, message=F}
# Criando dataset
g5_data <- fdata %>%
  mutate(genres = strsplit(genres, ",")) %>%
  unnest(genres) %>%
  select(tconst, Type, genres)

g5_data <- subset(g5_data, Type == "TV Series")


g5_data <- g5_data %>%
  group_by(genres) %>%
  summarise(freq = n())

g5 <- g5_data %>%
  ggplot() + 
  geom_text_wordcloud_area(aes(label = genres, size = freq), color = cor_series) +
  theme_void() +
  scale_size_continuous(range = c(1, 30)) +  # Adjust the size range according to your preference
  ggtitle("S√âRIES ASSISTIDAS POR G√äNERO") +
  theme(
    plot.title = element_text(hjust = 0.5, size = 20, face = "bold")
  )

# Print the word cloud plot
print(g5)
```

```{r warning=F, message=F}

g6_data <- d_paises
g6_data <- g6_data %>%
  mutate(Pais = ifelse(Pais == "United States", "USA", Pais))

g6_data <- g6_data %>%
  group_by(Pais) %>%
  summarise(freq = n())


WorldMap <- map_data("world") %>%
  filter(region != "Antarctica") %>%
  fortify()


WorldData <- left_join(WorldMap, g6_data, by = c("region" = "Pais"))


g6 <- ggplot(WorldData, aes(x = long, y = lat, group = group)) +  
  geom_polygon(color = "black", fill = cor_filmes, alpha = 0.2) +
  stat_centroid(data = subset(WorldData, !is.na(freq)),
                aes(size = freq, group = region),
                geom = "point",
                alpha = 1, color = cor_series) +
  theme_void() +
  ggtitle("FILMES E S√âRIES DE TV POR PA√çS DE ORIGEM") +
  theme(
    plot.title = element_text(hjust = 0.5, size = 20, face = "bold")
  )+
  labs(
    size = "Frequ√™ncia"
  )

```





### Criando layout de painel final
```{r warning=F, message=F}

#IMPORTANDO IMAGENS
imag1 <- readPNG("./imagens/PaginaA4.png")
im1<- rasterGrob(imag1, width = unit(29.7,"cm"), height = unit(42.0,"cm"))

imag2 <- readPNG("./imagens/Pipoca.png")
im2 <- rasterGrob(imag2, width = unit(2.40,"cm"), height = unit(2.40,"cm"))

#CRIANDO IMAGEM
png("Desafio3.png", width = 29.7 , height = 42.0, units = "cm", res = 500)

#CONSTRUIR UM NOVO GRID
grid.newpage() 

# Defina o n√∫mero de linhas e colunas
num_linhas <- 275
num_colunas <- 190

# Crie um novo layout de grid com o n√∫mero especificado de linhas e colunas
layout <- grid.layout(num_linhas, num_colunas)

# Inicialize uma nova p√°gina de grid com o layout especificado
grid.newpage()
pushViewport(viewport(layout = layout))

# Adicione o texto "PIPOCA TIME" na linha 4, coluna 4
grid.text("POPCORN", 
          x = unit(40, "mm"), 
          y = unit(405, "mm"),
          just = "center", 
          gp = gpar(fontsize = 20, 
                    fontface = "bold", 
                    col = "black",
                    cex = 1.5))

grid.text("TIME", 
          x = unit(40, "mm"), 
          y = unit(393, "mm"),
          just = "center", 
          gp = gpar(fontsize = 20, 
                    fontface = "bold", 
                    col = "black",
                    cex = 1.5))

# Adicione os plots na √°rea especificada
print(g1, vp = viewport(layout.pos.row = 4:48, layout.pos.col = 48:116))
print(g2, vp = viewport(layout.pos.row = 4:48, layout.pos.col = 118:186))
print(g3, vp = viewport(layout.pos.row = 50:126, layout.pos.col = 4:186))
print(g4, vp = viewport(layout.pos.row = 128:200, layout.pos.col = 4:93))
print(g5, vp = viewport(layout.pos.row = 128:200, layout.pos.col = 97:186))
print(g6, vp = viewport(layout.pos.row = 202:271, layout.pos.col = 4:186))

# Incluindo imagem
pushViewport(viewport(layout.pos.row = 24:48, layout.pos.col = 4:46))
print(grid.draw(im2))

# Salve o gr√°fico final
dev.off()

```

### Resultado Final

```{r echo=FALSE, out.width="70%", fig.align='center'}
knitr::include_graphics("./Desafio3.png")
```





