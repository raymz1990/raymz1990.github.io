{
  "hash": "cbaee2770fb82b9572a045ccda50d166",
  "result": {
    "markdown": "---\ndate: \"2023-10-19\"\ndescription: Avalia√ß√£o 1 - CE303 ‚Äì Visualiza√ß√£o de Dados Aplicada\nsubtitle:  Raymundo Eduardo Pilz\ntitle: \"Popcorn Time\"\nimage: featured.png\ntitle-block-style: none\ntoc: false\ncategories: \n  - R\n  - Power BI\n  - Dataviz\n---\n\n\nO presente trabalho foi desenvolvido na mat√©ria do 2¬∫ per√≠odo (2023) da disciplina de CE303 ‚Äì Visualiza√ß√£o de Dados Aplicada, ministrada pelo professor Anderson Ara pela Universidade Federal do Paran√° (UFPR).\n\nIncialmente, foi elaborado um relat√≥rio com o uso do PowerBI, dispon√≠vel em:\n\n\n\n\n## LAYOUT EM GGPLOT \n\n\n### Carregando Bibliotecas\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(extrafont)\nlibrary(dplyr)\nlibrary(data.table)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(scales)\nrequire(png)\nrequire(grid)\nlibrary(wordcloud)\nlibrary(ggwordcloud)\nlibrary(ggh4x)\nlibrary(rvest)\nlibrary(stringr)\nlibrary(countrycode)\nlibrary(leaflet)\n```\n:::\n\n\n### Carregando datasets\n\n::: {.cell}\n\n```{.r .cell-code}\nd_titulos <- fread(\"./dados/dTitleBasics.csv\")\nd_tempo <- fread(\"./dados/dTitleRuntime.csv\")\n\nstr(d_titulos)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nClasses 'data.table' and 'data.frame':\t2847 obs. of  7 variables:\n $ tconst       : chr  \"tt0076759\" \"tt0079470\" \"tt0111161\" \"tt1375666\" ...\n $ titleType    : chr  \"movie\" \"movie\" \"movie\" \"movie\" ...\n $ primaryTitle : chr  \"Star Wars: Episode IV - A New Hope\" \"Life of Brian\" \"The Shawshank Redemption\" \"Inception\" ...\n $ originalTitle: chr  \"Star Wars\" \"Life of Brian\" \"The Shawshank Redemption\" \"Inception\" ...\n $ startYear    : num  1977 1979 1994 2010 1983 ...\n $ endYear      : num  NA NA NA NA NA NA NA NA NA NA ...\n $ genres       : chr  \"Action,Adventure,Fantasy\" \"Comedy\" \"Drama\" \"Action,Adventure,Sci-Fi\" ...\n - attr(*, \".internal.selfref\")=<externalptr> \n```\n:::\n\n```{.r .cell-code}\nstr(d_tempo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nClasses 'data.table' and 'data.frame':\t2897 obs. of  2 variables:\n $ tconst        : chr  \"tt0076759\" \"tt0079470\" \"tt0111161\" \"tt1375666\" ...\n $ runtimeMinutes: int  121 94 142 148 131 124 201 118 99 139 ...\n - attr(*, \".internal.selfref\")=<externalptr> \n```\n:::\n:::\n\n\n\n### Criando arquivos para puxar os dados referente aos pa√≠ses dos filmes utilizando webscrap\n\n::: {.cell}\n\n```{.r .cell-code}\n# Importando arquivo base\nd_paises <- fread(\"./dados/dCountry.csv\")\n\n# Criando nova tabela\ndcountry <- select(d_paises, tconst)\ndcountry$url <- paste0(\"https://www.imdb.com/title/\", dcountry$tconst, \"/\")\n\n# Definindo o tempo limite global (conex√£o e tamanho do dataset podem interromper o carregamento dos dados)\noptions(timeout = 120)\n\n# Criando a fun√ß√£o \nextractCountry <- function(url) {\n  page <- read_html(url)\n  countries <- page %>%\n    html_nodes(\".ipc-metadata-list__item[data-testid='title-details-origin'] .ipc-inline-list__item a.ipc-metadata-list-item__list-content-item--link\") %>%\n    html_text() %>%\n    paste(collapse = \",\")\n  return(countries)\n}\n\n# Invocando a fun√ß√£o e carregando os dados\ndcountry <- dcountry %>%\n  rowwise() %>%\n  mutate(country = extractCountry(url))\n# Separando os p√°ises\ndcountry <- dcountry %>%\n  mutate(country = strsplit(country, \",\")) %>%\n  unnest(country)\n# Agrupando as fun√ß√µes\ndcountry <- dcountry %>%\n  group_by(country) %>%\n  summarise(freq = n())\n# Gerando os c√≥digos ISO dos pa√≠ses\ndcountry$iso3 <- countrycode(sourcevar = dcountry$country,\n                             origin = \"country.name\",\n                             destination = \"iso3c\")\n\nstr(dcountry)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [39 √ó 3] (S3: tbl_df/tbl/data.frame)\n $ country: chr [1:39] \"Argentina\" \"Australia\" \"Austria\" \"Belgium\" ...\n $ freq   : int [1:39] 1 9 1 3 4 15 7 1 2 6 ...\n $ iso3   : chr [1:39] \"ARG\" \"AUS\" \"AUT\" \"BEL\" ...\n```\n:::\n:::\n\n\n### Tratamento e Limpeza de dados\nPara otimiza√ß√£o do trabalho ser√° criado uma tabela principal com todas as variaveis necessarias para a cria√ß√£o dos gr√°ficos.\n\n- Pontos a serem observados:\n  - Ser√° criado uma nova coluna para a classifica√ß√£o em \"Filme\" ou \"Epis√≥dio de S√©rie de TV\" a partir da coluna \"titleType\" da (d_titulos). Foram constatados que alguns vari√°veis de \"titleType\" podem ter sido favoritadas incorretamente quando salvas no site. Para n√£o interfir na apura√ß√£o dos dados, as mesmas ser√£o eliminadas.\n  - Vamos trabalhar com o tempo em horas, assim, √© necess√°rios transformar minutos em horas.\n  \n\n::: {.cell}\n\n```{.r .cell-code}\n# Criando nova tabela a partir de d_titulos e realizando a classifica√ß√£o \nfdata <- d_titulos %>%\n  select(tconst, titleType, startYear, genres) %>%\n  mutate(Type = case_when(\n    titleType %in% c(\"movie\", \"tvMovie\") ~ \"Movie\",\n    titleType == \"tvEpisode\" ~ \"TV Series\",\n    TRUE ~ \"Others\"\n  ))\n\n# Filtrando os resultados para excluir aqueles que s√£o classificados como \"Others\"\nfdata <- filter(fdata, Type != \"Others\")\n\n# Unindo as tabelas d_data e d_tempo. tconst como chave primaria\nfdata <- left_join(fdata, d_tempo, by = \"tconst\")\n\n# Criar coluna horas e eliminar colunas desnecessarias\nfdata <- fdata %>%\n  mutate(Hours = runtimeMinutes / 60) %>%\n  select(-titleType, -runtimeMinutes)  \n\nfdata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         tconst startYear                   genres      Type     Hours\n   1: tt0076759      1977 Action,Adventure,Fantasy     Movie 2.0166667\n   2: tt0079470      1979                   Comedy     Movie 1.5666667\n   3: tt0111161      1994                    Drama     Movie 2.3666667\n   4: tt1375666      2010  Action,Adventure,Sci-Fi     Movie 2.4666667\n   5: tt0086190      1983 Action,Adventure,Fantasy     Movie 2.1833333\n  ---                                                                 \n2835: tt6263006      2017      Crime,Drama,Mystery TV Series 0.8500000\n2836: tt6263008      2017      Crime,Drama,Mystery TV Series 0.8166667\n2837: tt6263014      2017      Crime,Drama,Mystery TV Series 0.7333333\n2838: tt6263012      2017      Crime,Drama,Mystery TV Series 0.8500000\n2839: tt5780828      2017      Crime,Drama,Mystery TV Series 0.9500000\n```\n:::\n:::\n\n\n### Criando temas espec√≠ficos\n\n::: {.cell}\n\n```{.r .cell-code}\n# Temas padr√£o\ncor_titulo <- \"#000000\"\nfonte_titulo <- \"Rockwell\"\ntamanho_titulo <- 30\n\n# Cores Type\ncor_series <- \"#D64550\"\ncor_filmes <- \"#919191\"\n\ndcolor <- data.frame(\n  Type = c(\"Movie\", \"TV Series\"),\n  Color = c(cor_filmes, cor_series))\n\n\n# Fun√ß√£o para criar r√≥tulos com imagens\nimagem <- function(tipo) {\n  if (tipo == \"Movie\") {\n    return(\"üé¨\")\n  } else if (tipo == \"TV Series\") {\n    return(\"üì∫\")\n  } else {\n    return(tipo)\n  }\n}\n\n# Definindo tema\nmeutema <- function(){\n  theme_void() +\n  theme(\n    # axis.title = element_text(size = 20, \n    #                           family = \"Rockwell\", \n    #                           colour = cor_titulos), \n    # axis.text = element_text(size = 20,\n    #                          family = \"Rockwell\",\n    #                          colour = cor_titulos),\n    plot.title = element_text(size = 30,\n                              family = \"Rockwell\",\n                              colour = cor_titulo,\n                              face = \"bold\",\n                              hjust=0.5)#,\n    # plot.background = element_rect(fill = NA,\n    #                                colour = NA),\n    # panel.background = element_rect(fill = NA,\n    #                                 colour = NA),\n    # axis.ticks = element_line(colour = cor_titulos,\n    #                           size = 10),\n    # strip.background = element_rect(fill = cor_titulos),\n    # strip.text=element_text(family = \"Rockwell\", \n    #                         size = 15)\n    )\n}\n```\n:::\n\n\n## Graficos\n\n### GRAFICO 1 - FILMES VS S√âRIES DE TV\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calcular a contagem para cada tipo (Type) em fdata\ng1_data <- table(fdata$Type)\n\n# Total de assistidos\ntotal_assistido <- sum(g1_data)\n\n# Criar o dataframe e incluir as cores\ng1_data <- data.frame(Type = names(g1_data), \n                      Qtde = as.numeric(g1_data))\ng1_data$Freq <- (g1_data$Qtde / total_assistido)\n\n# Mesclar com o dataframe de cores (dcolor)\ng1_data <- left_join(g1_data, dcolor, by = \"Type\")\n\ng1_data <- g1_data %>% \n  arrange(desc(Type))\n\n# Criar o gr√°fico\ng1 <- ggplot(\n  g1_data, \n  aes(x = 1,\n      y = Freq,\n      fill = Color)) +\n  geom_bar(width = 1,\n           stat = \"identity\") +\n  coord_polar(\"y\",\n              start = 0) +\n  xlim(c(-1, 2)) +\n  theme_void() +\n  theme(plot.title = element_text(hjust = 0.5,\n                                  size = 20,\n                                  face = \"bold\")) +\n  geom_text(aes(label = paste(sapply(Type,\n                                     imagem))), \n            position = position_stack(vjust = 0.5), \n            size = 6) +\n  geom_label(aes(x = 2.0, \n                 label = format(Qtde, \n                                big.mark = \".\")), \n             position = position_stack(vjust = 0.5),\n             size = 5,\n             fill = \"white\",\n             label.padding = unit(0.0, \"lines\"),\n             label.size = 0.0,\n             na.rm = FALSE,\n             fontface = \"bold\") +\n  ggtitle(\"FILMES VS S√âRIES DE TV\") +\n  scale_fill_identity() +\n  theme(plot.title = element_text(size = 20,\n                                  face = \"bold\")) +\n  annotate(\"text\",\n           label = format(total_assistido, \n                          big.mark = \".\"),\n           family = fonte_titulo,\n           fontface = \"bold\",\n           color = cor_titulo,\n           size = 8,\n           x = -1,\n           y = 0) \n\n# Exibir o gr√°fico\nprint(g1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## GRAFICO 2 - HORAS ASSISTIDAS\n\n::: {.cell}\n\n```{.r .cell-code}\n# Criando dataset\ng2_data <- fdata %>%\n  filter(!is.na(Hours)) %>%  # Remover entradas com NA em Hours\n  group_by(Type) %>%\n  summarise(Hours = sum(Hours))\n\n# Total de horas assistidas\nhoras_assistidas <- round(sum(g2_data$Hours, na.rm = TRUE))\nhoras_assistidas\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2271\n```\n:::\n\n```{.r .cell-code}\n# Criar o dataframe e incluir as cores\ng2_data$Freq <- (g2_data$Hours / horas_assistidas)\n\n# Mesclar com o dataframe de cores (dcolor)\ng2_data <- left_join(g2_data, dcolor, by = \"Type\")\n\ng2_data <- g2_data %>% \n  arrange(desc(Type))\n\n# Criar o gr√°fico\ng2 <- ggplot(\n  g2_data, \n  aes(x = 1,\n      y = Freq,\n      fill = Color)) +\n  geom_bar(width = 1,\n           stat = \"identity\") +\n  coord_polar(\"y\",\n              start = 0) +\n  xlim(c(-1, 2)) +\n  theme_void() +\n  theme(plot.title = element_text(hjust = 0.5,\n                                  size = 20,\n                                  face = \"bold\")) +\n  geom_text(aes(label = paste(sapply(Type,\n                                     imagem))), \n            position = position_stack(vjust = 0.5), \n            size = 6) +\n  geom_label(aes(x = 2.0, \n                 label = format(round(Hours), \n                                big.mark = \".\")), \n             position = position_stack(vjust = 0.5),\n             size = 5,\n             fill = \"white\",\n             label.padding = unit(0.0, \"lines\"),\n             label.size = 0.0,\n             na.rm = FALSE,\n             fontface = \"bold\") +\n  ggtitle(\"HORAS ASSISTIDAS\") +\n  scale_fill_identity() +\n  annotate(\"text\",\n           label = format(horas_assistidas, \n                          big.mark = \".\"),\n           family = fonte_titulo,\n           fontface = \"bold\",\n           color = cor_titulo,\n           size = 8,\n           x = -1,\n           y = 0) \n\n# Exibir o gr√°fico\nprint(g2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## GRAFICO 3 - HORAS DE FILMES E S√âRIES DE TV ASSISTIDOS POR D√âCADA\n\n::: {.cell}\n\n```{.r .cell-code}\n# Criando dataset\ng3_data <- select(fdata, startYear, Type, Hours) %>%\n  filter(!is.na(Hours))\ng3_data$Year <- as.character(floor(g3_data$startYear / 10) * 10)\n\ng3_data <- g3_data %>%\n  filter(!is.na(Year)) %>%  # Remover entradas com NA em Hours\n  group_by(Year, Type) %>%\n  summarise(Hours = sum(Hours))\n\n# Mesclar com o dataframe de cores (dcolor)\ng3_data <- left_join(g3_data, dcolor, by = \"Type\")\n\n# g3_data <- g3_data %>% \n#   arrange(desc(Type))\n\n# Criar o gr√°fico\ng3 <- ggplot(\n  g3_data,\n  aes(fill = Type,\n      y = Hours,\n      x = Year,\n      label = format(round(Hours), big.mark = \".\"))) + \n  geom_bar(position = \"stack\",\n           stat = \"identity\") +\n  geom_text(data = subset(g3_data, Hours > 20),  \n            position = position_stack(vjust = 0.8, reverse = FALSE),\n            size = 4,  \n            color = \"black\",  \n            fontface = \"bold\",  \n            show.legend = FALSE) +  \n  ggtitle(\"HORAS DE FILMES E S√âRIES DE TV ASSISTIDOS POR D√âCADA\") +\n  xlab(\"\") +\n  ylab(\"Horas Assistidas\") +\n  scale_fill_manual(values = c(cor_filmes, cor_series)) +  \n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5,\n                                  size = 20,\n                                  face = \"bold\"),\n        axis.text.x = element_text(size = 14,  \n                                   face = \"bold\",  \n                                   vjust = 0.5,  \n                                   hjust = 0),   \n        axis.text.y = element_text(),\n        legend.position = \"top\",  \n        legend.justification = \"center\",  \n        legend.title = element_blank(),\n        legend.box = \"horizontal\") \n\n# Exibir o gr√°fico\nprint(g3)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## GRAFICO 4 - FILMES ASSISTIDOS POR G√äNERO\n\n::: {.cell}\n\n```{.r .cell-code}\n# Criando dataset\ng4_data <- fdata %>%\n  mutate(genres = strsplit(genres, \",\")) %>%\n  unnest(genres) %>%\n  select(tconst, Type, genres)\n\ng4_data <- subset(g4_data, Type == \"Movie\")\n\n\ng4_data <- g4_data %>%\n  group_by(genres) %>%\n  summarise(freq = n())\n\ng4 <- g4_data %>%\n  ggplot() + \n  geom_text_wordcloud_area(aes(label = genres, size = freq), color = cor_filmes) +\n  theme_void() +\n  scale_size_continuous(range = c(1, 30)) +  # Adjust the size range according to your preference\n  ggtitle(\"FILMES ASSISTIDOS POR G√äNERO\") +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 20, face = \"bold\")\n  )\n\n# Exibir o gr√°fico\nprint(g4)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## GRAFICO 5 - S√âRIES ASSISTIDAS POR G√äNERO\n\n::: {.cell}\n\n```{.r .cell-code}\n# Criando dataset\ng5_data <- fdata %>%\n  mutate(genres = strsplit(genres, \",\")) %>%\n  unnest(genres) %>%\n  select(tconst, Type, genres)\n\ng5_data <- subset(g5_data, Type == \"TV Series\")\n\n\ng5_data <- g5_data %>%\n  group_by(genres) %>%\n  summarise(freq = n())\n\ng5 <- g5_data %>%\n  ggplot() + \n  geom_text_wordcloud_area(aes(label = genres, size = freq), color = cor_series) +\n  theme_void() +\n  scale_size_continuous(range = c(1, 30)) +  # Adjust the size range according to your preference\n  ggtitle(\"S√âRIES ASSISTIDAS POR G√äNERO\") +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 20, face = \"bold\")\n  )\n\n# Exibir o gr√°fico\nprint(g5)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## GRAFICO 6 - FILMES E S√âRIES DE TV POR PA√çS DE ORIGEM\n\n::: {.cell}\n\n```{.r .cell-code}\ng6_data <- dcountry\n\nWorldMap <- map_data(\"world\") %>%\n  filter(region != \"Antarctica\") %>%\n  fortify()\n\n\nWorldData <- left_join(WorldMap, g6_data, by = c(\"region\" = \"country\"))\n\n\ng6 <- ggplot(WorldData, aes(x = long, y = lat, group = group)) +  \n  geom_polygon(color = \"black\", fill = cor_filmes, alpha = 0.2) +\n  stat_centroid(data = subset(WorldData, !is.na(freq)),\n                aes(size = freq, group = region),\n                geom = \"point\",\n                alpha = 1, color = cor_series) +\n  theme_void() +\n  ggtitle(\"FILMES E S√âRIES DE TV POR PA√çS DE ORIGEM\") +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 20, face = \"bold\")\n  )+\n  labs(\n    size = \"Frequ√™ncia\"\n  )\n\n# Exibir o gr√°fico\ng6\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n## Criando layout de painel final\n\n::: {.cell}\n\n```{.r .cell-code}\n#IMPORTANDO IMAGENS\nimag1 <- readPNG(\"./imagens/PaginaA4.png\")\nim1<- rasterGrob(imag1, width = unit(29.7,\"cm\"), height = unit(42.0,\"cm\"))\n\nimag2 <- readPNG(\"./imagens/Pipoca.png\")\nim2 <- rasterGrob(imag2, width = unit(2.40,\"cm\"), height = unit(2.40,\"cm\"))\n\n#CRIANDO IMAGEM\npng(\"Desafio3.png\", width = 29.7 , height = 42.0, units = \"cm\", res = 500)\n\n#CONSTRUIR UM NOVO GRID\ngrid.newpage() \n\n# Defina o n√∫mero de linhas e colunas\nnum_linhas <- 275\nnum_colunas <- 190\n\n# Crie um novo layout de grid com o n√∫mero especificado de linhas e colunas\nlayout <- grid.layout(num_linhas, num_colunas)\n\n# Inicialize uma nova p√°gina de grid com o layout especificado\ngrid.newpage()\npushViewport(viewport(layout = layout))\n\n# Adicione o texto \"PIPOCA TIME\" na linha 4, coluna 4\ngrid.text(\"POPCORN\", \n          x = unit(40, \"mm\"), \n          y = unit(405, \"mm\"),\n          just = \"center\", \n          gp = gpar(fontsize = 20, \n                    fontface = \"bold\", \n                    col = \"black\",\n                    cex = 1.5))\n\ngrid.text(\"TIME\", \n          x = unit(40, \"mm\"), \n          y = unit(393, \"mm\"),\n          just = \"center\", \n          gp = gpar(fontsize = 20, \n                    fontface = \"bold\", \n                    col = \"black\",\n                    cex = 1.5))\n\n# Adicione os plots na √°rea especificada\nprint(g1, vp = viewport(layout.pos.row = 4:48, layout.pos.col = 48:116))\nprint(g2, vp = viewport(layout.pos.row = 4:48, layout.pos.col = 118:186))\nprint(g3, vp = viewport(layout.pos.row = 50:126, layout.pos.col = 4:186))\nprint(g4, vp = viewport(layout.pos.row = 128:200, layout.pos.col = 4:93))\nprint(g5, vp = viewport(layout.pos.row = 128:200, layout.pos.col = 97:186))\nprint(g6, vp = viewport(layout.pos.row = 202:271, layout.pos.col = 4:186))\n\n# Incluindo imagem\npushViewport(viewport(layout.pos.row = 24:48, layout.pos.col = 4:46))\nprint(grid.draw(im2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n\n```{.r .cell-code}\n# Salve o gr√°fico final\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\npng \n  2 \n```\n:::\n:::\n\n\n### Resultado Final\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./Desafio3.png){fig-align='center' width=70%}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}